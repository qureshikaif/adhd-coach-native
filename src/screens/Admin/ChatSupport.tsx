import React, { useEffect, useLayoutEffect, useState } from 'react';
import {
  View,
  Text,
  KeyboardAvoidingView,
  ImageBackground,
  TextInput,
  TouchableOpacity,
} from '@gluestack-ui/themed';
import { StyleSheet, Platform, Keyboard, FlatList } from 'react-native';
import StatusBarChat from '../../components/molecules/StatusBarChat';
import ChatInput from '../../components/molecules/ChatInput';
import { useNavigation } from '@react-navigation/native';
import { tabBarStyle } from '../../navigation/AdminTabs';

const BackgroundImage = require('../../assets/images/admin-content-bg.png');

interface Message {
  id: string;
  sender: string;
  text: string;
  time: string;
}

const ChatSupport: React.FC = () => {
  const [keyboardVisible, setKeyboardVisible] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]); // State to hold messages
  const [newMessage, setNewMessage] = useState(''); // State to hold new message
  const navigation = useNavigation();

  // Function to send a message
  const sendMessage = async () => {
    // Simulating sending message to backend
    try {
      // Assuming you have an API endpoint '/sendMessage' to send messages
      const response = await fetch('/sendMessage', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: newMessage }),
      });
      if (response.ok) {
        // Message sent successfully, update frontend
        const newMessageObj: Message = {
          id: String(messages.length + 1),
          sender: 'user', // Assuming the sender is the current user
          text: newMessage,
          time: new Date().toLocaleTimeString(), // Assuming message timestamp is generated by backend
        };
        setMessages([...messages, newMessageObj]);
        setNewMessage(''); // Clear input field
      } else {
        console.error('Failed to send message');
      }
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  useEffect(() => {
    const keyboardDidShowListener = Keyboard.addListener(
      'keyboardDidShow',
      () => setKeyboardVisible(true),
    );
    const keyboardDidHideListener = Keyboard.addListener(
      'keyboardDidHide',
      () => setKeyboardVisible(false),
    );

    return () => {
      keyboardDidShowListener.remove();
      keyboardDidHideListener.remove();
    };
  }, []);

  return (
    <KeyboardAvoidingView
      h={'$full'}
      paddingBottom={keyboardVisible ? '$12' : 0}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>
      <ImageBackground source={BackgroundImage} style={styles.backgroundImage}>
        <StatusBarChat text="Sana Zehra" />
        <FlatList
          data={messages}
          renderItem={({ item }) => (
            <View
              style={[
                styles.messageContainer,
                item.sender === 'teacher'
                  ? styles.teacherMessage
                  : styles.userMessage,
              ]}>
              <Text style={styles.messageText}>{item.text}</Text>
              <Text style={styles.timeText}>{item.time}</Text>
            </View>
          )}
          keyExtractor={item => item.id}
          contentContainerStyle={styles.chatContainer}
        />
        <ChatInput
          value={newMessage}
          onChangeText={setNewMessage}
          onSend={sendMessage} // Pass the sendMessage function to ChatInput
        />
      </ImageBackground>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  backgroundImage: {
    flex: 1,
  },
  chatContainer: {
    padding: 10,
    flexGrow: 1,
    justifyContent: 'flex-end',
  },
  messageContainer: {
    marginVertical: 5,
    padding: 5,
    borderRadius: 10,
  },
  teacherMessage: {
    backgroundColor: '#A3BACD',
    alignSelf: 'flex-start',
  },
  userMessage: {
    backgroundColor: '#A3BACD',
    alignSelf: 'flex-end',
  },
  messageText: {
    fontSize: 16,
  },
  timeText: {
    fontSize: 12,
    color: '#555',
    marginTop: 5,
    textAlign: 'right',
  },
});

export default ChatSupport;
